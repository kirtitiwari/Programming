package string;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

/* Implement an algorithm to determine if a string has all unique characters. What if you can not use additional data structures? */
public class DuplicateChar {

	public static void main(String[] args) {		

	}
	
	@Test 
	public void duplicationTest(){
		System.out.println("string is" +duplicate("java"));
		assertEquals(true, duplicate("java"));
	}
	
	@Test
	public void duplicateAnyCharTest(){
		System.out.println("string2 is" +duplicate("abc"));
		assertEquals(false,duplicateAnyChar("abc"));
	}
	
	/* we r considering str should contain a to z character - integer hold 32 bit and a-z (26 char) can be express as 32 bit
	  Run time - O(n) and Space O(1)**/
	public static boolean duplicate(String str){
		int i =0; /* int will take 32 bits */
		if(str !=null && !str.trim().isEmpty()){			
			for (int j =0; j<str.length(); j++){
				int val = str.toLowerCase().charAt(j)-'a';
				if ((i & (1<<val)) >0) return true;
				i = i | (1<<val);
			}
		}
		return false;
		
	}
	/* we r considering str should contain any ASCII char[0 -255] 
	  Run time - O(n) and Space O(n) **/
	public static boolean duplicateAnyChar(String str){
		boolean [] charset = new boolean [256];
		for (int i =0; i<str.length(); i++){
			int val = str.charAt(i);
			if (charset[val]) {
				return true;
			}else {
				charset[val]= true;
			}
		}
				
		return false;
	}

}
